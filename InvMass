#ifdef __CLING__
R__LOAD_LIBRARY(libDelphes)
#include "classes/DelphesClasses.h"
#include "classes/DelphesFactory.h"
#include "classes/DelphesStream.h"
#include "classes/SortableObject.h"
#include "modules/Delphes.h"
#include "external/ExRootAnalysis/ExRootProgressBar.h"
#include "external/ExRootAnalysis/ExRootTreeBranch.h"
#include "external/ExRootAnalysis/ExRootTreeReader.h"
#include "external/ExRootAnalysis/ExRootTreeWriter.h"
#include "external/ExRootAnalysis/ExRootTask.h"
#endif

#include <TTree.h>
#include <TBranch.h>
#include <TLeaf.h>
#include <TH1.h>
#include <TCanvas.h>
#include <TVector.h>
#include <TLorentzVector.h>

void twoTauMonoHigg(const char *inputFile, const char *outputFile){
     gSystem->Load("libDelphes.so");
     TFile *file_sig = new TFile(inputFile);
     TFile *output = new TFile(outputFile, "recreate");
     TTree *tree_sig = (TTree*)file_sig->Get("Delphes");
     TTree *tree_output = new TTree("tree_output","Delphes");

     Int_t nEntries = tree_sig->GetEntries();
//     TH1F *TEtaH = new TH1F("2TauEta", "2TauEta", 100 , -4, 4);  
//     TH1F *TPhiH = new TH1F("2TauPhi", "2TauPhi", 100 , -4, 4); 
//     TH1F *TPtH = new TH1F("2TauPt", "2TauPt", 100 , 0, 2000);
     TH1F *InvMH = new TH1F("Invariant Mass", "Invariant Mass", 100, 0, 200);
     TH1F *HiggPt = new TH1F("HiggsPt", "HiggsPt", 100, 0, 2000);
     
     TLeaf *TEta = tree_sig->GetLeaf("Particle.Eta");
     TLeaf *TPhi = tree_sig->GetLeaf("Particle.Phi");
     TLeaf *TPt = tree_sig->GetLeaf("Particle.PT");
     TLeaf *TPID = tree_sig->GetLeaf("Particle.PID");
     TLeaf *Tsize = tree_sig->GetLeaf("Particle_size");
     TLeaf *TMass = tree_sig->GetLeaf("Particle.Mass");

     Float_t TauEta;
     Float_t TauPhi;
     Float_t TauPt;
     Float_t PID;
     Float_t TauMass;
     Float_t InvariantMass;
     Float_t HiggPt;
     Float_t TauEtaA;
     Float_t TauPhiA;
     Float_t TauPtA;
     Float_t TauMassA;
     
     for(Long64_t entry=0; entry < nEntries; entry++){
        tree_sig->GetEntry(entry);
        tree_output->GetEntry(entry);
        TPID->GetBranch()->GetEntry(entry);
        Int_t nTsize = Tsize->GetValue();
        TEta->GetBranch()->GetEntry(entry);
        TPhi->GetBranch()->GetEntry(entry);
        TPt->GetBranch()->GetEntry(entry);
        TMass->GetBranch()->GetEntry(entry);
        Int_t nTau = 0;
	Int_t nHigg = 0;
        TLorentzVector AInvV;
        TLorentzVector MInvV;
	TLorentzVector
        for(Long64_t entry1=0; entry1 < nTsize; entry1++){
	    PID = TPID->GetValue(entry1);  
	
            if (PID == 15.0){
	       nTau = nTau+1;
	       TauEta = TEta->GetValue(entry1);
	       TauPhi = TPhi->GetValue(entry1);
	       TauPt = TPt->GetValue(entry1);
               TauMass = TMass->GetValue(entry1);
	       MInvV.SetPtEtaPhiM(TauPt, TauEta, TauPhi,TauMass);
               
//	           cout << "find tau" <<endl;
        }
	    if (PID == -15.0){
               nTau = nTau + 1;
               TauEtaA = TEta->GetValue(entry1);
               TauPhiA = TPhi->GetValue(entry1);
               TauPtA = TPt->GetValue(entry1);
               TauMassA = TMass->GetValue(entry1);
               AInvV.SetPtEtaPhiM(TauPtA, TauEtaA, TauPhiA,TauMassA);
            }
	    if (PID == 25.0){
	       nHigg = nHigg+1;
	    }   
     }
            if (nTau == 2){
                  TLorentzVector InvV;
                  InvV = MInvV + AInvV;
                  InvariantMass = InvV.Mag();
                  InvMH->Fill(InvariantMass);

	    if (nHigg == 1){
	       HiggPt = TPt->GetValue(entry1);
               HPtH->Fill(HiggPt);  
	    }
	    }
     }
     TCanvas *mycanvas = new TCanvas("mycanvas","My Canvas",1000,1000);
     /*
     TEtaH->Draw();
     TEtaH->GetXaxis()->SetTitle("#eta");
     TEtaH->GetYaxis()->SetTitle("number of events");
     mycanvas->SaveAs("TEta.png");
     TPhiH->Draw();
     TPhiH->GetXaxis()->SetTitle("Radians");
     TPhiH->GetYaxis()->SetTitle("number of events");
     mycanvas->SaveAs("TPhi.png");
     TPtH->Draw();
     TPtH->GetXaxis()->SetTitle("GeV");
     TPtH->GetYaxis()->SetTitle("number of events");
     mycanvas->SaveAs("TPt.png");
     */
     InvMH->Draw();
     InvMH->GetXaxis()->SetTitle("GeV");
     InvMH->GetYaxis()->SetTitle("number of events");
     mycanvas->SaveAs("InvM.png");
     HPtH->Draw();
     HPtH->GetXaxis()->SetTitle("GeV");
     HPtH->GetYaxis()->SetTitle("number of events");
     mycanvas->SaveAs("HPt.png");
     
     InvMH->Write();
     HPtH->Write();
//     TEtaH->Write();
//     TPhiH->Write();
//     TPtH->Write();
     tree_output->Write();
     output->Close();
     file_sig->Close();
}
